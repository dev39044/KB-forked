################
# git commands #
################

# 1st there are a few concepts:
# Project folder - this is where .git folder resides, where all your files to track are, where all your repositories are, etc.
# Untracked file is the one that is not added to stage level.
# Below command will add file1.txt to stage level
git add file1.txt

# this command will add ALL files in current foder to stage level.
git add .
# Stage level means that git tracks now on every change to this file. Like index.
# If you remove a file from stage, then add 20 changes to this file and then add it again to stage(to index),
# git will not "see" the difference since your last commit, as this file was not tracked. 
 

# In order to see untracked or unstaged files use this:
git status

# Stage level is a kind of middle level before committing the file to local repository.
# Below command will add file1.txt to local repository
git commit -m "Change 1" 

# Local repository is folder named .git where are all changes are kept.

# To view commit logs:
git log

############
# Branches #
############

# Main reason using branches is that you take a copy of master branch during creation of the new one,
# then work on and if you don't like your changes you can easily delete just the branch.

# Main branch is always named "master"
# Creating a new branch could be done using below command
git branch <branch-name> 

# To use newly created branch, you need to switch to it using below command:
git checkout <branch-name>

# To merge 2 branches follow these steps:
# 1. Switch to your target branch
git checkout <target-branch-name> // usually this is master

# Check that you're there
git status

# 3. Merge both branches 
git merge <source-branch-name>

#######################
# IGNORE FILES BY GIT #
#######################

# In order to skip some files to be tracked by git, e.g. *.log files do this:
# Create a file .gitignore outside of .git folder and put *.log in it.
# You need also to add .gitignore file to the repository. That's it.

################
# REPOSITORIES #
################

# To clone a repo that already exist on remote side, use below command:
git clone https://github.com/diskmandata4/KB.git

# To distribute a complete local folder tree like KB, enter in the folder KB and use command:
git init

# Then you have to have already created github.com account and repo named KB.
# Enter below commands:
git remote add origin https://github.com/diskmandata4/KB.git

# Then check if you have added your remote sources with:
git remote -v  

# To actually sync the whole KB tree use:
git pull -u origin master

###################
# Restoring files #
###################

# Let's say you have commited a perfect update in your local git db.
# Now you have changed a file and you are unable to restore it anymore.
# Below command will remove every change after your last commit.
git reset --hard <part of your last commit SHA1>

# This will do the same. Actually if you want to revert a single file AND keep all other changes, then use below command.
# If you use git reset --hard then you will lose ALL changes after the last successful commit! 
git checkout <path/to/file 

# If you want to modify your last commit, then: 
git reset --soft <part of your SHA1 commit BEFORE the last >

# but after that your files will be in staging state. 
# If you want to unstage specific file, then use:
git reset <path/to/file>

# When you're ready with the changes, commit them.



























